!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/36a6dd19/
%.o	linkedlist/Makefile	/^%.o: %.cpp $(DEPS)$/;"	t
CC	linkedlist/Makefile	/^CC=g++$/;"	m
CurrElemNum	stack/stack.h	/^    int CurrElemNum;$/;"	m	class:Stack	typeref:typename:int
DEPS	linkedlist/Makefile	/^DEPS = linkedlist.h $/;"	m
Data	stack/stack.h	/^    Elem *Data;$/;"	m	class:Stack	typeref:typename:Elem *
LINKEDLIST_H	linkedlist/linkedlist.h	/^#define LINKEDLIST_H$/;"	d
Linkedlist	linkedlist/linkedlist.cpp	/^Linkedlist::Linkedlist(){$/;"	f	class:Linkedlist
Linkedlist	linkedlist/linkedlist.cpp	/^Linkedlist::Linkedlist(Node<std::string>* firstNode){$/;"	f	class:Linkedlist
Linkedlist	linkedlist/linkedlist.h	/^class Linkedlist$/;"	c
MAX_NUM	stack/stack.h	/^    const int MAX_NUM;$/;"	m	class:Stack	typeref:typename:const int
NODE_H	BST/node.h	/^#define NODE_H$/;"	d
NODE_H	linkedlist/node.h	/^#define NODE_H$/;"	d
Node	BST/node.h	/^Node<T>::Node(){ $/;"	f	class:Node
Node	BST/node.h	/^Node<T>::Node(T data){ $/;"	f	class:Node
Node	BST/node.h	/^class Node$/;"	c
Node	linkedlist/node.h	/^Node<T>::Node(){ $/;"	f	class:Node
Node	linkedlist/node.h	/^Node<T>::Node(T data){ $/;"	f	class:Node
Node	linkedlist/node.h	/^class Node$/;"	c
OBJ	linkedlist/Makefile	/^OBJ = linkedlist.o main.o$/;"	m
Peek	stack/stack.h	/^inline const Elem &Stack<Elem>::Peek(int Depth) const{$/;"	f	class:Stack	typeref:typename:const Elem &
Pop	stack/stack.h	/^inline Elem Stack<Elem>::Pop(void){$/;"	f	class:Stack	typeref:typename:Elem
Push	stack/stack.h	/^inline void Stack<Elem>::Push(const Elem &Item){$/;"	f	class:Stack	typeref:typename:void
Stack	stack/stack.h	/^Stack<Elem>::Stack(int MaxSize) : MAX_NUM(MaxSize)$/;"	f	class:Stack
Stack	stack/stack.h	/^class Stack$/;"	c
__StackClassH__	stack/stack.h	/^#define __StackClassH__$/;"	d
addToIndex	linkedlist/linkedlist.cpp	/^void Linkedlist::addToIndex(Node<std::string> *node, int index){$/;"	f	class:Linkedlist	typeref:typename:void
all	stack/Makefile	/^all: stack main$/;"	t
append	linkedlist/linkedlist.cpp	/^void Linkedlist::append(Node<std::string> *node){$/;"	f	class:Linkedlist	typeref:typename:void
clean	stack/Makefile	/^clean:$/;"	t
clear	linkedlist/Makefile	/^clear:$/;"	t
data	BST/node.h	/^  T data;$/;"	m	class:Node	typeref:typename:T
data	linkedlist/node.h	/^  T data;$/;"	m	class:Node	typeref:typename:T
eliminate	BST/node.h	/^inline const bool Node<T>::eliminate(){$/;"	f	class:Node	typeref:typename:const bool
eliminate	linkedlist/node.h	/^inline const bool Node<T>::eliminate(){$/;"	f	class:Node	typeref:typename:const bool
firstNode	linkedlist/linkedlist.h	/^  Node<std::string>* firstNode;$/;"	m	class:Linkedlist	typeref:typename:Node<std::string> *
getData	BST/node.h	/^inline const T Node<T>::getData(){$/;"	f	class:Node	typeref:typename:const T
getData	linkedlist/node.h	/^inline const T Node<T>::getData(){$/;"	f	class:Node	typeref:typename:const T
getLastNode	linkedlist/linkedlist.cpp	/^Node<std::string>* Linkedlist::getLastNode(){$/;"	f	class:Linkedlist	typeref:typename:Node<std::string> *
getNextNode	BST/node.h	/^inline Node<T>* Node<T>::getNextNode(void) {$/;"	f	class:Node	typeref:typename:Node<T> *
getNextNode	linkedlist/node.h	/^inline Node<T>* Node<T>::getNextNode(void) {$/;"	f	class:Node	typeref:typename:Node<T> *
getNodeIndex	linkedlist/linkedlist.cpp	/^Node<std::string>* Linkedlist::getNodeIndex(int index){$/;"	f	class:Linkedlist	typeref:typename:Node<std::string> *
getPreviousNode	BST/node.h	/^inline Node<T>* Node<T>::getPreviousNode(){$/;"	f	class:Node	typeref:typename:Node<T> *
getPreviousNode	linkedlist/node.h	/^inline Node<T>* Node<T>::getPreviousNode(){$/;"	f	class:Node	typeref:typename:Node<T> *
isEmpty	stack/stack.h	/^inline const bool Stack<Elem>::isEmpty(void){$/;"	f	class:Stack	typeref:typename:const bool
leftChild	BST/node.h	/^  Node* leftChild;$/;"	m	class:Node	typeref:typename:Node *
main	linkedlist/Makefile	/^main: $(OBJ)$/;"	t
main	linkedlist/main.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	stack/Makefile	/^main: $/;"	t
main	stack/main.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
nextNode	linkedlist/node.h	/^  Node* nextNode;$/;"	m	class:Node	typeref:typename:Node *
parent	BST/node.h	/^  Node* parent;$/;"	m	class:Node	typeref:typename:Node *
prepend	linkedlist/linkedlist.cpp	/^void Linkedlist::prepend(Node<std::string> *node){$/;"	f	class:Linkedlist	typeref:typename:void
previousNode	linkedlist/node.h	/^  Node* previousNode;$/;"	m	class:Node	typeref:typename:Node *
print	linkedlist/linkedlist.cpp	/^void Linkedlist::print(){$/;"	f	class:Linkedlist	typeref:typename:void
removeFirst	linkedlist/linkedlist.cpp	/^void Linkedlist::removeFirst(){$/;"	f	class:Linkedlist	typeref:typename:void
removeFromIndex	linkedlist/linkedlist.cpp	/^void Linkedlist::removeFromIndex(int index){$/;"	f	class:Linkedlist	typeref:typename:void
removeLast	linkedlist/linkedlist.cpp	/^void Linkedlist::removeLast(){$/;"	f	class:Linkedlist	typeref:typename:void
rightChild	BST/node.h	/^  Node* rightChild;$/;"	m	class:Node	typeref:typename:Node *
run	linkedlist/Makefile	/^run: main$/;"	t
run	stack/Makefile	/^run: main$/;"	t
setNextNode	BST/node.h	/^inline const bool Node<T>::setNextNode(Node* nextNode){ $/;"	f	class:Node	typeref:typename:const bool
setNextNode	linkedlist/node.h	/^inline const bool Node<T>::setNextNode(Node* nextNode){ $/;"	f	class:Node	typeref:typename:const bool
setPreviousNode	BST/node.h	/^inline const bool Node<T>::setPreviousNode(Node* previousNode){ $/;"	f	class:Node	typeref:typename:const bool
setPreviousNode	linkedlist/node.h	/^inline const bool Node<T>::setPreviousNode(Node* previousNode){ $/;"	f	class:Node	typeref:typename:const bool
size	linkedlist/linkedlist.h	/^  int size;$/;"	m	class:Linkedlist	typeref:typename:int
stack	stack/Makefile	/^stack:$/;"	t
~Linkedlist	linkedlist/linkedlist.cpp	/^Linkedlist::~Linkedlist(){ }$/;"	f	class:Linkedlist
~Node	BST/node.h	/^Node<T>::~Node(){ }$/;"	f	class:Node
~Node	linkedlist/node.h	/^Node<T>::~Node(){ }$/;"	f	class:Node
~Stack	stack/stack.h	/^Stack<Elem>::~Stack<Elem>(void){$/;"	f	class:Stack
